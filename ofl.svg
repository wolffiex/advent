<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="453.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="212"><g><title>advent`core::alloc::layout::Layout::align (1 samples, 0.47%)</title><rect x="0.4717%" y="117" width="0.4717%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="0.7217%" y="127.50"></text></g><g><title>advent`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 1.42%)</title><rect x="0.0000%" y="261" width="1.4151%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="3"/><text x="0.2500%" y="271.50"></text></g><g><title>advent`alloc::slice::_&lt;impl [T]&gt;::to_vec_in (3 samples, 1.42%)</title><rect x="0.0000%" y="245" width="1.4151%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3"/><text x="0.2500%" y="255.50"></text></g><g><title>advent`alloc::slice::hack::to_vec (3 samples, 1.42%)</title><rect x="0.0000%" y="229" width="1.4151%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="3"/><text x="0.2500%" y="239.50"></text></g><g><title>advent`&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 1.42%)</title><rect x="0.0000%" y="213" width="1.4151%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="3"/><text x="0.2500%" y="223.50"></text></g><g><title>advent`alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 1.42%)</title><rect x="0.0000%" y="197" width="1.4151%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="3"/><text x="0.2500%" y="207.50"></text></g><g><title>advent`alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 1.42%)</title><rect x="0.0000%" y="181" width="1.4151%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="3"/><text x="0.2500%" y="191.50"></text></g><g><title>advent`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 1.42%)</title><rect x="0.0000%" y="165" width="1.4151%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="3"/><text x="0.2500%" y="175.50"></text></g><g><title>advent`core::alloc::layout::Layout::array (2 samples, 0.94%)</title><rect x="0.4717%" y="149" width="0.9434%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="2"/><text x="0.7217%" y="159.50"></text></g><g><title>advent`core::alloc::layout::Layout::pad_to_align (2 samples, 0.94%)</title><rect x="0.4717%" y="133" width="0.9434%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="2"/><text x="0.7217%" y="143.50"></text></g><g><title>advent`core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.47%)</title><rect x="0.9434%" y="117" width="0.4717%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="1.1934%" y="127.50"></text></g><g><title>advent`core::ptr::const_ptr::_&lt;impl *const T&gt;::guaranteed_eq (2 samples, 0.94%)</title><rect x="5.1887%" y="213" width="0.9434%" height="15" fill="rgb(240,193,28)" fg:x="11" fg:w="2"/><text x="5.4387%" y="223.50"></text></g><g><title>advent`core::ptr::const_ptr::_&lt;impl *const T&gt;::is_null (1 samples, 0.47%)</title><rect x="6.1321%" y="213" width="0.4717%" height="15" fill="rgb(216,20,37)" fg:x="13" fg:w="1"/><text x="6.3821%" y="223.50"></text></g><g><title>advent`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::guaranteed_eq (5 samples, 2.36%)</title><rect x="6.6038%" y="213" width="2.3585%" height="15" fill="rgb(206,188,39)" fg:x="14" fg:w="5"/><text x="6.8538%" y="223.50">a..</text></g><g><title>advent`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 7.55%)</title><rect x="2.8302%" y="229" width="7.5472%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="16"/><text x="3.0802%" y="239.50">advent`&lt;co..</text></g><g><title>advent`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::is_null (3 samples, 1.42%)</title><rect x="8.9623%" y="213" width="1.4151%" height="15" fill="rgb(231,73,38)" fg:x="19" fg:w="3"/><text x="9.2123%" y="223.50"></text></g><g><title>advent`&lt;usize as core::ops::arith::Add&lt;&amp;usize&gt;&gt;::add (5 samples, 2.36%)</title><rect x="12.7358%" y="213" width="2.3585%" height="15" fill="rgb(225,20,46)" fg:x="27" fg:w="5"/><text x="12.9858%" y="223.50">a..</text></g><g><title>advent`&lt;usize as core::ops::arith::Add&gt;::add (4 samples, 1.89%)</title><rect x="13.2075%" y="197" width="1.8868%" height="15" fill="rgb(210,31,41)" fg:x="28" fg:w="4"/><text x="13.4575%" y="207.50">a..</text></g><g><title>advent`core::hash::sip::u8to64_le (5 samples, 2.36%)</title><rect x="22.6415%" y="53" width="2.3585%" height="15" fill="rgb(221,200,47)" fg:x="48" fg:w="5"/><text x="22.8915%" y="63.50">a..</text></g><g><title>advent`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (19 samples, 8.96%)</title><rect x="16.5094%" y="69" width="8.9623%" height="15" fill="rgb(226,26,5)" fg:x="35" fg:w="19"/><text x="16.7594%" y="79.50">advent`&lt;core:..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.47%)</title><rect x="25.0000%" y="53" width="0.4717%" height="15" fill="rgb(249,33,26)" fg:x="53" fg:w="1"/><text x="25.2500%" y="63.50"></text></g><g><title>advent`&lt;advent::Point as core::hash::Hash&gt;::hash (38 samples, 17.92%)</title><rect x="16.0377%" y="149" width="17.9245%" height="15" fill="rgb(235,183,28)" fg:x="34" fg:w="38"/><text x="16.2877%" y="159.50">advent`&lt;advent::Point as cor..</text></g><g><title>advent`core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (38 samples, 17.92%)</title><rect x="16.0377%" y="133" width="17.9245%" height="15" fill="rgb(221,5,38)" fg:x="34" fg:w="38"/><text x="16.2877%" y="143.50">advent`core::hash::impls::_&lt;..</text></g><g><title>advent`core::hash::Hasher::write_usize (38 samples, 17.92%)</title><rect x="16.0377%" y="117" width="17.9245%" height="15" fill="rgb(247,18,42)" fg:x="34" fg:w="38"/><text x="16.2877%" y="127.50">advent`core::hash::Hasher::w..</text></g><g><title>advent`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (37 samples, 17.45%)</title><rect x="16.5094%" y="101" width="17.4528%" height="15" fill="rgb(241,131,45)" fg:x="35" fg:w="37"/><text x="16.7594%" y="111.50">advent`&lt;std::collections::h..</text></g><g><title>advent`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (37 samples, 17.45%)</title><rect x="16.5094%" y="85" width="17.4528%" height="15" fill="rgb(249,31,29)" fg:x="35" fg:w="37"/><text x="16.7594%" y="95.50">advent`&lt;core::hash::sip::Si..</text></g><g><title>advent`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (18 samples, 8.49%)</title><rect x="25.4717%" y="69" width="8.4906%" height="15" fill="rgb(225,111,53)" fg:x="54" fg:w="18"/><text x="25.7217%" y="79.50">advent`&lt;core..</text></g><g><title>advent`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.47%)</title><rect x="34.4340%" y="117" width="0.4717%" height="15" fill="rgb(238,160,17)" fg:x="73" fg:w="1"/><text x="34.6840%" y="127.50"></text></g><g><title>advent`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (11 samples, 5.19%)</title><rect x="34.9057%" y="117" width="5.1887%" height="15" fill="rgb(214,148,48)" fg:x="74" fg:w="11"/><text x="35.1557%" y="127.50">advent..</text></g><g><title>advent`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (35 samples, 16.51%)</title><rect x="33.9623%" y="149" width="16.5094%" height="15" fill="rgb(232,36,49)" fg:x="72" fg:w="35"/><text x="34.2123%" y="159.50">advent`&lt;std::collections:..</text></g><g><title>advent`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (34 samples, 16.04%)</title><rect x="34.4340%" y="133" width="16.0377%" height="15" fill="rgb(209,103,24)" fg:x="73" fg:w="34"/><text x="34.6840%" y="143.50">advent`&lt;core::hash::sip::..</text></g><g><title>advent`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (22 samples, 10.38%)</title><rect x="40.0943%" y="117" width="10.3774%" height="15" fill="rgb(229,88,8)" fg:x="85" fg:w="22"/><text x="40.3443%" y="127.50">advent`&lt;core::h..</text></g><g><title>advent`core::hash::sip::Hasher&lt;S&gt;::new_with_keys (5 samples, 2.36%)</title><rect x="50.4717%" y="117" width="2.3585%" height="15" fill="rgb(213,181,19)" fg:x="107" fg:w="5"/><text x="50.7217%" y="127.50">a..</text></g><g><title>advent`core::hash::sip::SipHasher13::new_with_keys (6 samples, 2.83%)</title><rect x="50.4717%" y="133" width="2.8302%" height="15" fill="rgb(254,191,54)" fg:x="107" fg:w="6"/><text x="50.7217%" y="143.50">ad..</text></g><g><title>advent`core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.47%)</title><rect x="52.8302%" y="117" width="0.4717%" height="15" fill="rgb(241,83,37)" fg:x="112" fg:w="1"/><text x="53.0802%" y="127.50"></text></g><g><title>advent`&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (7 samples, 3.30%)</title><rect x="50.4717%" y="149" width="3.3019%" height="15" fill="rgb(233,36,39)" fg:x="107" fg:w="7"/><text x="50.7217%" y="159.50">adv..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.47%)</title><rect x="53.3019%" y="133" width="0.4717%" height="15" fill="rgb(226,3,54)" fg:x="113" fg:w="1"/><text x="53.5519%" y="143.50"></text></g><g><title>advent`hashbrown::map::make_hash (82 samples, 38.68%)</title><rect x="16.0377%" y="165" width="38.6792%" height="15" fill="rgb(245,192,40)" fg:x="34" fg:w="82"/><text x="16.2877%" y="175.50">advent`hashbrown::map::make_hash</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.94%)</title><rect x="53.7736%" y="149" width="0.9434%" height="15" fill="rgb(238,167,29)" fg:x="114" fg:w="2"/><text x="54.0236%" y="159.50"></text></g><g><title>advent`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (1 samples, 0.47%)</title><rect x="56.1321%" y="133" width="0.4717%" height="15" fill="rgb(232,182,51)" fg:x="119" fg:w="1"/><text x="56.3821%" y="143.50"></text></g><g><title>advent`hashbrown::raw::Bucket&lt;T&gt;::as_ref (3 samples, 1.42%)</title><rect x="55.6604%" y="149" width="1.4151%" height="15" fill="rgb(231,60,39)" fg:x="118" fg:w="3"/><text x="55.9104%" y="159.50"></text></g><g><title>advent`hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.47%)</title><rect x="56.6038%" y="133" width="0.4717%" height="15" fill="rgb(208,69,12)" fg:x="120" fg:w="1"/><text x="56.8538%" y="143.50"></text></g><g><title>advent`&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.47%)</title><rect x="58.9623%" y="133" width="0.4717%" height="15" fill="rgb(235,93,37)" fg:x="125" fg:w="1"/><text x="59.2123%" y="143.50"></text></g><g><title>advent`&lt;T as core::borrow::Borrow&lt;T&gt;&gt;::borrow (1 samples, 0.47%)</title><rect x="59.4340%" y="133" width="0.4717%" height="15" fill="rgb(213,116,39)" fg:x="126" fg:w="1"/><text x="59.6840%" y="143.50"></text></g><g><title>advent`&lt;advent::Point as core::cmp::PartialEq&gt;::eq (3 samples, 1.42%)</title><rect x="59.9057%" y="133" width="1.4151%" height="15" fill="rgb(222,207,29)" fg:x="127" fg:w="3"/><text x="60.1557%" y="143.50"></text></g><g><title>advent`&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 2.83%)</title><rect x="61.3208%" y="117" width="2.8302%" height="15" fill="rgb(206,96,30)" fg:x="130" fg:w="6"/><text x="61.5708%" y="127.50">ad..</text></g><g><title>advent`&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 1.89%)</title><rect x="62.2642%" y="101" width="1.8868%" height="15" fill="rgb(218,138,4)" fg:x="132" fg:w="4"/><text x="62.5142%" y="111.50">a..</text></g><g><title>advent`hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.94%)</title><rect x="63.2075%" y="85" width="0.9434%" height="15" fill="rgb(250,191,14)" fg:x="134" fg:w="2"/><text x="63.4575%" y="95.50"></text></g><g><title>advent`core::ptr::mut_ptr::_&lt;impl *mut T&gt;::sub (4 samples, 1.89%)</title><rect x="64.1509%" y="101" width="1.8868%" height="15" fill="rgb(239,60,40)" fg:x="136" fg:w="4"/><text x="64.4009%" y="111.50">a..</text></g><g><title>advent`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 5.66%)</title><rect x="61.3208%" y="133" width="5.6604%" height="15" fill="rgb(206,27,48)" fg:x="130" fg:w="12"/><text x="61.5708%" y="143.50">advent`..</text></g><g><title>advent`hashbrown::raw::RawTableInner&lt;A&gt;::bucket (6 samples, 2.83%)</title><rect x="64.1509%" y="117" width="2.8302%" height="15" fill="rgb(225,35,8)" fg:x="136" fg:w="6"/><text x="64.4009%" y="127.50">ad..</text></g><g><title>advent`hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.94%)</title><rect x="66.0377%" y="101" width="0.9434%" height="15" fill="rgb(250,213,24)" fg:x="140" fg:w="2"/><text x="66.2877%" y="111.50"></text></g><g><title>advent`DYLD-STUB$$memcpy (1 samples, 0.47%)</title><rect x="66.9811%" y="133" width="0.4717%" height="15" fill="rgb(247,123,22)" fg:x="142" fg:w="1"/><text x="67.2311%" y="143.50"></text></g><g><title>advent`hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.94%)</title><rect x="67.4528%" y="133" width="0.9434%" height="15" fill="rgb(231,138,38)" fg:x="143" fg:w="2"/><text x="67.7028%" y="143.50"></text></g><g><title>advent`hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.94%)</title><rect x="67.4528%" y="117" width="0.9434%" height="15" fill="rgb(231,145,46)" fg:x="143" fg:w="2"/><text x="67.7028%" y="127.50"></text></g><g><title>advent`&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.47%)</title><rect x="68.3962%" y="101" width="0.4717%" height="15" fill="rgb(251,118,11)" fg:x="145" fg:w="1"/><text x="68.6462%" y="111.50"></text></g><g><title>advent`hashbrown::raw::RawTableInner&lt;A&gt;::ctrl (7 samples, 3.30%)</title><rect x="70.2830%" y="85" width="3.3019%" height="15" fill="rgb(217,147,25)" fg:x="149" fg:w="7"/><text x="70.5330%" y="95.50">adv..</text></g><g><title>advent`hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (2 samples, 0.94%)</title><rect x="73.5849%" y="85" width="0.9434%" height="15" fill="rgb(247,81,37)" fg:x="156" fg:w="2"/><text x="73.8349%" y="95.50"></text></g><g><title>advent`core::intrinsics::copy_nonoverlapping (1 samples, 0.47%)</title><rect x="75.9434%" y="53" width="0.4717%" height="15" fill="rgb(209,12,38)" fg:x="161" fg:w="1"/><text x="76.1934%" y="63.50"></text></g><g><title>advent`hashbrown::raw::generic::Group::load (5 samples, 2.36%)</title><rect x="74.5283%" y="85" width="2.3585%" height="15" fill="rgb(227,1,9)" fg:x="158" fg:w="5"/><text x="74.7783%" y="95.50">a..</text></g><g><title>advent`core::ptr::read_unaligned (3 samples, 1.42%)</title><rect x="75.4717%" y="69" width="1.4151%" height="15" fill="rgb(248,47,43)" fg:x="160" fg:w="3"/><text x="75.7217%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.47%)</title><rect x="76.4151%" y="53" width="0.4717%" height="15" fill="rgb(221,10,30)" fg:x="162" fg:w="1"/><text x="76.6651%" y="63.50"></text></g><g><title>advent`core::num::_&lt;impl u64&gt;::from_ne_bytes (8 samples, 3.77%)</title><rect x="77.3585%" y="69" width="3.7736%" height="15" fill="rgb(210,229,1)" fg:x="164" fg:w="8"/><text x="77.6085%" y="79.50">adve..</text></g><g><title>advent`hashbrown::raw::generic::Group::match_byte (13 samples, 6.13%)</title><rect x="76.8868%" y="85" width="6.1321%" height="15" fill="rgb(222,148,37)" fg:x="163" fg:w="13"/><text x="77.1368%" y="95.50">advent`h..</text></g><g><title>advent`hashbrown::raw::generic::repeat (4 samples, 1.89%)</title><rect x="81.1321%" y="69" width="1.8868%" height="15" fill="rgb(234,67,33)" fg:x="172" fg:w="4"/><text x="81.3821%" y="79.50">a..</text></g><g><title>advent`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.47%)</title><rect x="85.3774%" y="37" width="0.4717%" height="15" fill="rgb(247,98,35)" fg:x="181" fg:w="1"/><text x="85.6274%" y="47.50"></text></g><g><title>advent`hashbrown::raw::RawIterHash&lt;T,A&gt;::new (38 samples, 17.92%)</title><rect x="68.3962%" y="117" width="17.9245%" height="15" fill="rgb(247,138,52)" fg:x="145" fg:w="38"/><text x="68.6462%" y="127.50">advent`hashbrown::raw::RawIt..</text></g><g><title>advent`hashbrown::raw::RawIterHashInner&lt;A&gt;::new (37 samples, 17.45%)</title><rect x="68.8679%" y="101" width="17.4528%" height="15" fill="rgb(213,79,30)" fg:x="146" fg:w="37"/><text x="69.1179%" y="111.50">advent`hashbrown::raw::RawI..</text></g><g><title>advent`hashbrown::raw::h2 (7 samples, 3.30%)</title><rect x="83.0189%" y="85" width="3.3019%" height="15" fill="rgb(246,177,23)" fg:x="176" fg:w="7"/><text x="83.2689%" y="95.50">adv..</text></g><g><title>advent`core::cmp::Ord::min (7 samples, 3.30%)</title><rect x="83.0189%" y="69" width="3.3019%" height="15" fill="rgb(230,62,27)" fg:x="176" fg:w="7"/><text x="83.2689%" y="79.50">adv..</text></g><g><title>advent`core::cmp::min_by (7 samples, 3.30%)</title><rect x="83.0189%" y="53" width="3.3019%" height="15" fill="rgb(216,154,8)" fg:x="176" fg:w="7"/><text x="83.2689%" y="63.50">adv..</text></g><g><title>advent`core::ops::function::FnOnce::call_once (1 samples, 0.47%)</title><rect x="85.8491%" y="37" width="0.4717%" height="15" fill="rgb(244,35,45)" fg:x="182" fg:w="1"/><text x="86.0991%" y="47.50"></text></g><g><title>advent`hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (39 samples, 18.40%)</title><rect x="68.3962%" y="133" width="18.3962%" height="15" fill="rgb(251,115,12)" fg:x="145" fg:w="39"/><text x="68.6462%" y="143.50">advent`hashbrown::raw::RawTab..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.47%)</title><rect x="86.3208%" y="117" width="0.4717%" height="15" fill="rgb(240,54,50)" fg:x="183" fg:w="1"/><text x="86.5708%" y="127.50"></text></g><g><title>advent`hashbrown::raw::RawTableInner&lt;A&gt;::bucket (1 samples, 0.47%)</title><rect x="86.7925%" y="133" width="0.4717%" height="15" fill="rgb(233,84,52)" fg:x="184" fg:w="1"/><text x="87.0425%" y="143.50"></text></g><g><title>advent`hashbrown::raw::RawTable&lt;T,A&gt;::find (66 samples, 31.13%)</title><rect x="57.0755%" y="149" width="31.1321%" height="15" fill="rgb(207,117,47)" fg:x="121" fg:w="66"/><text x="57.3255%" y="159.50">advent`hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.94%)</title><rect x="87.2642%" y="133" width="0.9434%" height="15" fill="rgb(249,43,39)" fg:x="185" fg:w="2"/><text x="87.5142%" y="143.50"></text></g><g><title>advent`core::iter::traits::iterator::Iterator::fold (187 samples, 88.21%)</title><rect x="1.4151%" y="245" width="88.2075%" height="15" fill="rgb(209,38,44)" fg:x="3" fg:w="187"/><text x="1.6651%" y="255.50">advent`core::iter::traits::iterator::Iterator::fold</text></g><g><title>advent`advent::calc_risk::_{{closure}} (168 samples, 79.25%)</title><rect x="10.3774%" y="229" width="79.2453%" height="15" fill="rgb(236,212,23)" fg:x="22" fg:w="168"/><text x="10.6274%" y="239.50">advent`advent::calc_risk::_{{closure}}</text></g><g><title>advent`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (158 samples, 74.53%)</title><rect x="15.0943%" y="213" width="74.5283%" height="15" fill="rgb(242,79,21)" fg:x="32" fg:w="158"/><text x="15.3443%" y="223.50">advent`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get</text></g><g><title>advent`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (157 samples, 74.06%)</title><rect x="15.5660%" y="197" width="74.0566%" height="15" fill="rgb(211,96,35)" fg:x="33" fg:w="157"/><text x="15.8160%" y="207.50">advent`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>advent`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (156 samples, 73.58%)</title><rect x="16.0377%" y="181" width="73.5849%" height="15" fill="rgb(253,215,40)" fg:x="34" fg:w="156"/><text x="16.2877%" y="191.50">advent`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner</text></g><g><title>advent`hashbrown::raw::RawTable&lt;T,A&gt;::get (74 samples, 34.91%)</title><rect x="54.7170%" y="165" width="34.9057%" height="15" fill="rgb(211,81,21)" fg:x="116" fg:w="74"/><text x="54.9670%" y="175.50">advent`hashbrown::raw::RawTable&lt;T,A&gt;::get</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 1.42%)</title><rect x="88.2075%" y="149" width="1.4151%" height="15" fill="rgb(208,190,38)" fg:x="187" fg:w="3"/><text x="88.4575%" y="159.50"></text></g><g><title>advent`advent::calc_risk (190 samples, 89.62%)</title><rect x="1.4151%" y="261" width="89.6226%" height="15" fill="rgb(235,213,38)" fg:x="3" fg:w="190"/><text x="1.6651%" y="271.50">advent`advent::calc_risk</text></g><g><title>advent`core::slice::iter::_&lt;impl core::iter::traits::collect::IntoIterator for &amp;[T]&gt;::into_iter (3 samples, 1.42%)</title><rect x="89.6226%" y="245" width="1.4151%" height="15" fill="rgb(237,122,38)" fg:x="190" fg:w="3"/><text x="89.8726%" y="255.50"></text></g><g><title>advent`core::slice::_&lt;impl [T]&gt;::iter (3 samples, 1.42%)</title><rect x="89.6226%" y="229" width="1.4151%" height="15" fill="rgb(244,218,35)" fg:x="190" fg:w="3"/><text x="89.8726%" y="239.50"></text></g><g><title>advent`core::slice::iter::Iter&lt;T&gt;::new (2 samples, 0.94%)</title><rect x="90.0943%" y="213" width="0.9434%" height="15" fill="rgb(240,68,47)" fg:x="191" fg:w="2"/><text x="90.3443%" y="223.50"></text></g><g><title>advent`core::ptr::const_ptr::_&lt;impl *const T&gt;::guaranteed_eq (1 samples, 0.47%)</title><rect x="90.5660%" y="197" width="0.4717%" height="15" fill="rgb(210,16,53)" fg:x="192" fg:w="1"/><text x="90.8160%" y="207.50"></text></g><g><title>advent`alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.47%)</title><rect x="91.0377%" y="229" width="0.4717%" height="15" fill="rgb(235,124,12)" fg:x="193" fg:w="1"/><text x="91.2877%" y="239.50"></text></g><g><title>advent`&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.47%)</title><rect x="91.5094%" y="181" width="0.4717%" height="15" fill="rgb(224,169,11)" fg:x="194" fg:w="1"/><text x="91.7594%" y="191.50"></text></g><g><title>advent`alloc::raw_vec::finish_grow (1 samples, 0.47%)</title><rect x="91.9811%" y="181" width="0.4717%" height="15" fill="rgb(250,166,2)" fg:x="195" fg:w="1"/><text x="92.2311%" y="191.50"></text></g><g><title>advent`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.47%)</title><rect x="91.9811%" y="165" width="0.4717%" height="15" fill="rgb(242,216,29)" fg:x="195" fg:w="1"/><text x="92.2311%" y="175.50"></text></g><g><title>advent`alloc::alloc::Global::grow_impl (1 samples, 0.47%)</title><rect x="91.9811%" y="149" width="0.4717%" height="15" fill="rgb(230,116,27)" fg:x="195" fg:w="1"/><text x="92.2311%" y="159.50"></text></g><g><title>advent`alloc::alloc::realloc (1 samples, 0.47%)</title><rect x="91.9811%" y="133" width="0.4717%" height="15" fill="rgb(228,99,48)" fg:x="195" fg:w="1"/><text x="92.2311%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.47%)</title><rect x="91.9811%" y="117" width="0.4717%" height="15" fill="rgb(253,11,6)" fg:x="195" fg:w="1"/><text x="92.2311%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.47%)</title><rect x="91.9811%" y="101" width="0.4717%" height="15" fill="rgb(247,143,39)" fg:x="195" fg:w="1"/><text x="92.2311%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.47%)</title><rect x="91.9811%" y="85" width="0.4717%" height="15" fill="rgb(236,97,10)" fg:x="195" fg:w="1"/><text x="92.2311%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.47%)</title><rect x="91.9811%" y="69" width="0.4717%" height="15" fill="rgb(233,208,19)" fg:x="195" fg:w="1"/><text x="92.2311%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.47%)</title><rect x="91.9811%" y="53" width="0.4717%" height="15" fill="rgb(216,164,2)" fg:x="195" fg:w="1"/><text x="92.2311%" y="63.50"></text></g><g><title>advent`core::alloc::layout::Layout::pad_to_align (1 samples, 0.47%)</title><rect x="92.4528%" y="165" width="0.4717%" height="15" fill="rgb(220,129,5)" fg:x="196" fg:w="1"/><text x="92.7028%" y="175.50"></text></g><g><title>advent`core::alloc::layout::Layout::padding_needed_for (1 samples, 0.47%)</title><rect x="92.4528%" y="149" width="0.4717%" height="15" fill="rgb(242,17,10)" fg:x="196" fg:w="1"/><text x="92.7028%" y="159.50"></text></g><g><title>advent`alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 2.36%)</title><rect x="91.0377%" y="261" width="2.3585%" height="15" fill="rgb(242,107,0)" fg:x="193" fg:w="5"/><text x="91.2877%" y="271.50">a..</text></g><g><title>advent`alloc::vec::Vec&lt;T,A&gt;::reserve (5 samples, 2.36%)</title><rect x="91.0377%" y="245" width="2.3585%" height="15" fill="rgb(251,28,31)" fg:x="193" fg:w="5"/><text x="91.2877%" y="255.50">a..</text></g><g><title>advent`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 1.89%)</title><rect x="91.5094%" y="229" width="1.8868%" height="15" fill="rgb(233,223,10)" fg:x="194" fg:w="4"/><text x="91.7594%" y="239.50">a..</text></g><g><title>advent`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 1.89%)</title><rect x="91.5094%" y="213" width="1.8868%" height="15" fill="rgb(215,21,27)" fg:x="194" fg:w="4"/><text x="91.7594%" y="223.50">a..</text></g><g><title>advent`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 1.89%)</title><rect x="91.5094%" y="197" width="1.8868%" height="15" fill="rgb(232,23,21)" fg:x="194" fg:w="4"/><text x="91.7594%" y="207.50">a..</text></g><g><title>advent`core::alloc::layout::Layout::array (2 samples, 0.94%)</title><rect x="92.4528%" y="181" width="0.9434%" height="15" fill="rgb(244,5,23)" fg:x="196" fg:w="2"/><text x="92.7028%" y="191.50"></text></g><g><title>advent`core::num::_&lt;impl usize&gt;::checked_mul (1 samples, 0.47%)</title><rect x="92.9245%" y="165" width="0.4717%" height="15" fill="rgb(226,81,46)" fg:x="197" fg:w="1"/><text x="93.1745%" y="175.50"></text></g><g><title>advent`core::fmt::Arguments::new_v1 (1 samples, 0.47%)</title><rect x="93.3962%" y="261" width="0.4717%" height="15" fill="rgb(247,70,30)" fg:x="198" fg:w="1"/><text x="93.6462%" y="271.50"></text></g><g><title>advent`core::iter::traits::iterator::Iterator::collect (1 samples, 0.47%)</title><rect x="93.8679%" y="261" width="0.4717%" height="15" fill="rgb(212,68,19)" fg:x="199" fg:w="1"/><text x="94.1179%" y="271.50"></text></g><g><title>advent`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.47%)</title><rect x="93.8679%" y="245" width="0.4717%" height="15" fill="rgb(240,187,13)" fg:x="199" fg:w="1"/><text x="94.1179%" y="255.50"></text></g><g><title>advent`alloc::vec::source_iter_marker::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.47%)</title><rect x="93.8679%" y="229" width="0.4717%" height="15" fill="rgb(223,113,26)" fg:x="199" fg:w="1"/><text x="94.1179%" y="239.50"></text></g><g><title>advent`&lt;I as alloc::vec::source_iter_marker::SpecInPlaceCollect&lt;T,I&gt;&gt;::collect_in_place (1 samples, 0.47%)</title><rect x="93.8679%" y="213" width="0.4717%" height="15" fill="rgb(206,192,2)" fg:x="199" fg:w="1"/><text x="94.1179%" y="223.50"></text></g><g><title>advent`&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.47%)</title><rect x="93.8679%" y="197" width="0.4717%" height="15" fill="rgb(241,108,4)" fg:x="199" fg:w="1"/><text x="94.1179%" y="207.50"></text></g><g><title>advent`core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.47%)</title><rect x="93.8679%" y="181" width="0.4717%" height="15" fill="rgb(247,173,49)" fg:x="199" fg:w="1"/><text x="94.1179%" y="191.50"></text></g><g><title>advent`core::iter::adapters::filter_map::filter_map_try_fold::_{{closure}} (1 samples, 0.47%)</title><rect x="93.8679%" y="165" width="0.4717%" height="15" fill="rgb(224,114,35)" fg:x="199" fg:w="1"/><text x="94.1179%" y="175.50"></text></g><g><title>advent`alloc::vec::source_iter_marker::write_in_place_with_drop::_{{closure}} (1 samples, 0.47%)</title><rect x="93.8679%" y="149" width="0.4717%" height="15" fill="rgb(245,159,27)" fg:x="199" fg:w="1"/><text x="94.1179%" y="159.50"></text></g><g><title>advent`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;advent::Point&gt;&gt; (1 samples, 0.47%)</title><rect x="94.3396%" y="261" width="0.4717%" height="15" fill="rgb(245,172,44)" fg:x="200" fg:w="1"/><text x="94.5896%" y="271.50"></text></g><g><title>advent`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;advent::Point&gt;&gt; (1 samples, 0.47%)</title><rect x="94.3396%" y="245" width="0.4717%" height="15" fill="rgb(236,23,11)" fg:x="200" fg:w="1"/><text x="94.5896%" y="255.50"></text></g><g><title>advent`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.47%)</title><rect x="94.3396%" y="229" width="0.4717%" height="15" fill="rgb(205,117,38)" fg:x="200" fg:w="1"/><text x="94.5896%" y="239.50"></text></g><g><title>advent`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.47%)</title><rect x="94.3396%" y="213" width="0.4717%" height="15" fill="rgb(237,72,25)" fg:x="200" fg:w="1"/><text x="94.5896%" y="223.50"></text></g><g><title>advent`alloc::alloc::dealloc (1 samples, 0.47%)</title><rect x="94.3396%" y="197" width="0.4717%" height="15" fill="rgb(244,70,9)" fg:x="200" fg:w="1"/><text x="94.5896%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.47%)</title><rect x="94.3396%" y="181" width="0.4717%" height="15" fill="rgb(217,125,39)" fg:x="200" fg:w="1"/><text x="94.5896%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.47%)</title><rect x="94.3396%" y="165" width="0.4717%" height="15" fill="rgb(235,36,10)" fg:x="200" fg:w="1"/><text x="94.5896%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.47%)</title><rect x="94.3396%" y="149" width="0.4717%" height="15" fill="rgb(251,123,47)" fg:x="200" fg:w="1"/><text x="94.5896%" y="159.50"></text></g><g><title>advent`core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;advent::Point&gt;&gt; (1 samples, 0.47%)</title><rect x="94.8113%" y="261" width="0.4717%" height="15" fill="rgb(221,13,13)" fg:x="201" fg:w="1"/><text x="95.0613%" y="271.50"></text></g><g><title>advent`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.47%)</title><rect x="94.8113%" y="245" width="0.4717%" height="15" fill="rgb(238,131,9)" fg:x="201" fg:w="1"/><text x="95.0613%" y="255.50"></text></g><g><title>advent`core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;advent::Point,alloc::alloc::Global&gt;&gt; (1 samples, 0.47%)</title><rect x="94.8113%" y="229" width="0.4717%" height="15" fill="rgb(211,50,8)" fg:x="201" fg:w="1"/><text x="95.0613%" y="239.50"></text></g><g><title>advent`&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.47%)</title><rect x="94.8113%" y="213" width="0.4717%" height="15" fill="rgb(245,182,24)" fg:x="201" fg:w="1"/><text x="95.0613%" y="223.50"></text></g><g><title>advent`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;advent::Point&gt;&gt; (1 samples, 0.47%)</title><rect x="94.8113%" y="197" width="0.4717%" height="15" fill="rgb(242,14,37)" fg:x="201" fg:w="1"/><text x="95.0613%" y="207.50"></text></g><g><title>advent`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.47%)</title><rect x="94.8113%" y="181" width="0.4717%" height="15" fill="rgb(246,228,12)" fg:x="201" fg:w="1"/><text x="95.0613%" y="191.50"></text></g><g><title>advent`alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.47%)</title><rect x="94.8113%" y="165" width="0.4717%" height="15" fill="rgb(213,55,15)" fg:x="201" fg:w="1"/><text x="95.0613%" y="175.50"></text></g><g><title>advent`core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;advent::Point&gt;&gt;&gt; (1 samples, 0.47%)</title><rect x="95.2830%" y="261" width="0.4717%" height="15" fill="rgb(209,9,3)" fg:x="202" fg:w="1"/><text x="95.5330%" y="271.50"></text></g><g><title>advent`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;advent::Point&gt;&gt; (1 samples, 0.47%)</title><rect x="95.2830%" y="245" width="0.4717%" height="15" fill="rgb(230,59,30)" fg:x="202" fg:w="1"/><text x="95.5330%" y="255.50"></text></g><g><title>advent`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;advent::Point&gt;&gt; (1 samples, 0.47%)</title><rect x="95.2830%" y="229" width="0.4717%" height="15" fill="rgb(209,121,21)" fg:x="202" fg:w="1"/><text x="95.5330%" y="239.50"></text></g><g><title>advent`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.47%)</title><rect x="95.2830%" y="213" width="0.4717%" height="15" fill="rgb(220,109,13)" fg:x="202" fg:w="1"/><text x="95.5330%" y="223.50"></text></g><g><title>advent`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.47%)</title><rect x="95.2830%" y="197" width="0.4717%" height="15" fill="rgb(232,18,1)" fg:x="202" fg:w="1"/><text x="95.5330%" y="207.50"></text></g><g><title>advent`alloc::alloc::dealloc (1 samples, 0.47%)</title><rect x="95.2830%" y="181" width="0.4717%" height="15" fill="rgb(215,41,42)" fg:x="202" fg:w="1"/><text x="95.5330%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.47%)</title><rect x="95.2830%" y="165" width="0.4717%" height="15" fill="rgb(224,123,36)" fg:x="202" fg:w="1"/><text x="95.5330%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.47%)</title><rect x="95.2830%" y="149" width="0.4717%" height="15" fill="rgb(240,125,3)" fg:x="202" fg:w="1"/><text x="95.5330%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.47%)</title><rect x="95.2830%" y="133" width="0.4717%" height="15" fill="rgb(205,98,50)" fg:x="202" fg:w="1"/><text x="95.5330%" y="143.50"></text></g><g><title>advent`&lt;advent::Point as core::hash::Hash&gt;::hash (1 samples, 0.47%)</title><rect x="95.7547%" y="197" width="0.4717%" height="15" fill="rgb(205,185,37)" fg:x="203" fg:w="1"/><text x="96.0047%" y="207.50"></text></g><g><title>advent`core::hash::impls::_&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.47%)</title><rect x="95.7547%" y="181" width="0.4717%" height="15" fill="rgb(238,207,15)" fg:x="203" fg:w="1"/><text x="96.0047%" y="191.50"></text></g><g><title>advent`core::hash::Hasher::write_usize (1 samples, 0.47%)</title><rect x="95.7547%" y="165" width="0.4717%" height="15" fill="rgb(213,199,42)" fg:x="203" fg:w="1"/><text x="96.0047%" y="175.50"></text></g><g><title>advent`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.47%)</title><rect x="95.7547%" y="149" width="0.4717%" height="15" fill="rgb(235,201,11)" fg:x="203" fg:w="1"/><text x="96.0047%" y="159.50"></text></g><g><title>advent`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.47%)</title><rect x="96.2264%" y="197" width="0.4717%" height="15" fill="rgb(207,46,11)" fg:x="204" fg:w="1"/><text x="96.4764%" y="207.50"></text></g><g><title>advent`&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.47%)</title><rect x="96.2264%" y="181" width="0.4717%" height="15" fill="rgb(241,35,35)" fg:x="204" fg:w="1"/><text x="96.4764%" y="191.50"></text></g><g><title>advent`&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.47%)</title><rect x="96.2264%" y="165" width="0.4717%" height="15" fill="rgb(243,32,47)" fg:x="204" fg:w="1"/><text x="96.4764%" y="175.50"></text></g><g><title>advent`hashbrown::map::make_hash (3 samples, 1.42%)</title><rect x="95.7547%" y="213" width="1.4151%" height="15" fill="rgb(247,202,23)" fg:x="203" fg:w="3"/><text x="96.0047%" y="223.50"></text></g><g><title>advent`&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.47%)</title><rect x="96.6981%" y="197" width="0.4717%" height="15" fill="rgb(219,102,11)" fg:x="205" fg:w="1"/><text x="96.9481%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.47%)</title><rect x="96.6981%" y="181" width="0.4717%" height="15" fill="rgb(243,110,44)" fg:x="205" fg:w="1"/><text x="96.9481%" y="191.50"></text></g><g><title>advent`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (5 samples, 2.36%)</title><rect x="95.7547%" y="261" width="2.3585%" height="15" fill="rgb(222,74,54)" fg:x="203" fg:w="5"/><text x="96.0047%" y="271.50">a..</text></g><g><title>advent`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (5 samples, 2.36%)</title><rect x="95.7547%" y="245" width="2.3585%" height="15" fill="rgb(216,99,12)" fg:x="203" fg:w="5"/><text x="96.0047%" y="255.50">a..</text></g><g><title>advent`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5 samples, 2.36%)</title><rect x="95.7547%" y="229" width="2.3585%" height="15" fill="rgb(226,22,26)" fg:x="203" fg:w="5"/><text x="96.0047%" y="239.50">a..</text></g><g><title>advent`hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.94%)</title><rect x="97.1698%" y="213" width="0.9434%" height="15" fill="rgb(217,163,10)" fg:x="206" fg:w="2"/><text x="97.4198%" y="223.50"></text></g><g><title>advent`hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.94%)</title><rect x="97.1698%" y="197" width="0.9434%" height="15" fill="rgb(213,25,53)" fg:x="206" fg:w="2"/><text x="97.4198%" y="207.50"></text></g><g><title>advent`hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (1 samples, 0.47%)</title><rect x="97.6415%" y="181" width="0.4717%" height="15" fill="rgb(252,105,26)" fg:x="207" fg:w="1"/><text x="97.8915%" y="191.50"></text></g><g><title>advent`std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.47%)</title><rect x="98.1132%" y="261" width="0.4717%" height="15" fill="rgb(220,39,43)" fg:x="208" fg:w="1"/><text x="98.3632%" y="271.50"></text></g><g><title>advent`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.47%)</title><rect x="98.1132%" y="245" width="0.4717%" height="15" fill="rgb(229,68,48)" fg:x="208" fg:w="1"/><text x="98.3632%" y="255.50"></text></g><g><title>advent`hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (1 samples, 0.47%)</title><rect x="98.1132%" y="229" width="0.4717%" height="15" fill="rgb(252,8,32)" fg:x="208" fg:w="1"/><text x="98.3632%" y="239.50"></text></g><g><title>advent`hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.47%)</title><rect x="98.1132%" y="213" width="0.4717%" height="15" fill="rgb(223,20,43)" fg:x="208" fg:w="1"/><text x="98.3632%" y="223.50"></text></g><g><title>advent`&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.47%)</title><rect x="98.1132%" y="197" width="0.4717%" height="15" fill="rgb(229,81,49)" fg:x="208" fg:w="1"/><text x="98.3632%" y="207.50"></text></g><g><title>advent`hashbrown::raw::RawTableInner&lt;A&gt;::bucket (1 samples, 0.47%)</title><rect x="98.1132%" y="181" width="0.4717%" height="15" fill="rgb(236,28,36)" fg:x="208" fg:w="1"/><text x="98.3632%" y="191.50"></text></g><g><title>advent`hashbrown::raw::RawTableInner&lt;A&gt;::data_end (1 samples, 0.47%)</title><rect x="98.1132%" y="165" width="0.4717%" height="15" fill="rgb(249,185,26)" fg:x="208" fg:w="1"/><text x="98.3632%" y="175.50"></text></g><g><title>advent`main (211 samples, 99.53%)</title><rect x="0.0000%" y="389" width="99.5283%" height="15" fill="rgb(249,174,33)" fg:x="0" fg:w="211"/><text x="0.2500%" y="399.50">advent`main</text></g><g><title>advent`std::rt::lang_start (211 samples, 99.53%)</title><rect x="0.0000%" y="373" width="99.5283%" height="15" fill="rgb(233,201,37)" fg:x="0" fg:w="211"/><text x="0.2500%" y="383.50">advent`std::rt::lang_start</text></g><g><title>advent`std::rt::lang_start_internal (211 samples, 99.53%)</title><rect x="0.0000%" y="357" width="99.5283%" height="15" fill="rgb(221,78,26)" fg:x="0" fg:w="211"/><text x="0.2500%" y="367.50">advent`std::rt::lang_start_internal</text></g><g><title>advent`std::rt::lang_start::_{{closure}} (211 samples, 99.53%)</title><rect x="0.0000%" y="341" width="99.5283%" height="15" fill="rgb(250,127,30)" fg:x="0" fg:w="211"/><text x="0.2500%" y="351.50">advent`std::rt::lang_start::_{{closure}}</text></g><g><title>advent`std::sys_common::backtrace::__rust_begin_short_backtrace (211 samples, 99.53%)</title><rect x="0.0000%" y="325" width="99.5283%" height="15" fill="rgb(230,49,44)" fg:x="0" fg:w="211"/><text x="0.2500%" y="335.50">advent`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>advent`core::ops::function::FnOnce::call_once (211 samples, 99.53%)</title><rect x="0.0000%" y="309" width="99.5283%" height="15" fill="rgb(229,67,23)" fg:x="0" fg:w="211"/><text x="0.2500%" y="319.50">advent`core::ops::function::FnOnce::call_once</text></g><g><title>advent`advent::main (211 samples, 99.53%)</title><rect x="0.0000%" y="293" width="99.5283%" height="15" fill="rgb(249,83,47)" fg:x="0" fg:w="211"/><text x="0.2500%" y="303.50">advent`advent::main</text></g><g><title>advent`advent::part1 (211 samples, 99.53%)</title><rect x="0.0000%" y="277" width="99.5283%" height="15" fill="rgb(215,43,3)" fg:x="0" fg:w="211"/><text x="0.2500%" y="287.50">advent`advent::part1</text></g><g><title>advent`std::io::stdio::_print (2 samples, 0.94%)</title><rect x="98.5849%" y="261" width="0.9434%" height="15" fill="rgb(238,154,13)" fg:x="209" fg:w="2"/><text x="98.8349%" y="271.50"></text></g><g><title>advent`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (2 samples, 0.94%)</title><rect x="98.5849%" y="245" width="0.9434%" height="15" fill="rgb(219,56,2)" fg:x="209" fg:w="2"/><text x="98.8349%" y="255.50"></text></g><g><title>advent`core::fmt::write (2 samples, 0.94%)</title><rect x="98.5849%" y="229" width="0.9434%" height="15" fill="rgb(233,0,4)" fg:x="209" fg:w="2"/><text x="98.8349%" y="239.50"></text></g><g><title>advent`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.94%)</title><rect x="98.5849%" y="213" width="0.9434%" height="15" fill="rgb(235,30,7)" fg:x="209" fg:w="2"/><text x="98.8349%" y="223.50"></text></g><g><title>advent`&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.94%)</title><rect x="98.5849%" y="197" width="0.9434%" height="15" fill="rgb(250,79,13)" fg:x="209" fg:w="2"/><text x="98.8349%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`write (2 samples, 0.94%)</title><rect x="98.5849%" y="181" width="0.9434%" height="15" fill="rgb(211,146,34)" fg:x="209" fg:w="2"/><text x="98.8349%" y="191.50"></text></g><g><title>all (212 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(228,22,38)" fg:x="0" fg:w="212"/><text x="0.2500%" y="431.50"></text></g><g><title>dyld`start (212 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(235,168,5)" fg:x="0" fg:w="212"/><text x="0.2500%" y="415.50">dyld`start</text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.47%)</title><rect x="99.5283%" y="389" width="0.4717%" height="15" fill="rgb(221,155,16)" fg:x="211" fg:w="1"/><text x="99.7783%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.47%)</title><rect x="99.5283%" y="373" width="0.4717%" height="15" fill="rgb(215,215,53)" fg:x="211" fg:w="1"/><text x="99.7783%" y="383.50"></text></g></svg></svg>